/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */

/**
 * @module paste-from-office/filters/unwrapmslistsparaborders
 */

import {
	ViewTreeWalker,
	type ViewElement,
	type ViewDocumentFragment,
	type ViewItem,
	type ViewUpcastWriter
} from 'ckeditor5/src/engine.js';

/**
 * When a user sets border top or border bottom on list items, Microsoft Word wraps
 * whole list items (which may be H1 elements) with <div> elements. It's problematic
 * because it separates block lists using div elements and continuation of multi level
 * lists is hard to achieve.
 *
 * The HTML generated by Microsoft Word looks like this:
 *
 * 	<div style="mso-element:para-border-div;border-bottom:solid #A7A9AC 2.25pt; ...">
 * 		<h1 style="mso-list:l2 level1 lfo1; mso-border-bottom-alt:solid #A7A9AC 2.25pt; ...">Title</h1>
 * 	</div>
 *
 * In the scenario above, the <div> element should be unwrapped and the border can be moved to it's last element.
 * It results in the following HTML structure:
 *
 * 	<h1 style="mso-list:l2 level1 lfo1; border-bottom:solid #A7A9AC 2.25pt; ...">Title</h1>
 *
 * For elements with border top, the same logic applies, but the border is applied to the first child of the wrapper element.
 *
 * @internal
 */
export function unwrapMSListsParaBorders( documentFragment: ViewDocumentFragment, writer: ViewUpcastWriter ): void {
	const range = writer.createRangeIn( documentFragment );
	const walker = new ViewTreeWalker( {
		boundaries: range,
		ignoreElementEnd: true
	} );

	const unwrapElements = new Set<ViewElement>();

	for ( const { item } of range ) {
		if ( !isParaBorderWrapperElement( item ) || !hasAnyListLikeElement( item, writer ) ) {
			continue;
		}

		unwrapElements.add( item );

		// Avoid processing children of the current item as they will be processed by the walker.
		walker.jumpTo( writer.createPositionAfter( item ) );
	}

	for ( const wrapper of unwrapElements ) {
		const children = [ ...wrapper.getChildren() ] as Array<ViewElement>;

		// Cleanup alternative border styles from children.
		// They no longer make sense after removal of the wrapper and moving borders.
		for ( const child of children ) {
			writer.removeStyle( 'mso-border-bottom-alt', child );
			writer.removeStyle( 'mso-border-top-alt', child );
		}

		// If there is border bottom, move it to the last element.
		const borderBottom = wrapper.getStyle( 'border-bottom' );

		if ( borderBottom && borderBottom !== 'none' ) {
			const lastChild = children.at( -1 );

			if ( lastChild ) {
				if ( lastChild.getStyle( 'border' ) === 'none' ) {
					writer.removeStyle( 'border', lastChild );
				}

				writer.setStyle( 'border-bottom', borderBottom, lastChild );
			}
		}

		// If there is border top, move it to the first element.
		const borderTop = wrapper.getStyle( 'border-top' );

		if ( borderTop && borderTop !== 'none' ) {
			const firstChild = children[ 0 ];

			if ( firstChild ) {
				if ( firstChild.getStyle( 'border' ) === 'none' ) {
					writer.removeStyle( 'border', firstChild );
				}

				writer.setStyle( 'border-top', borderTop, firstChild );
			}
		}

		writer.insertChild( wrapper.index!, children, wrapper.parent! );
		writer.remove( wrapper );
	}
}

/**
 * Para borders seem to be identified by `mso-element: para-border-div` style.
 */
function isParaBorderWrapperElement( wrapper: ViewItem ): wrapper is ViewElement {
	return wrapper.is( 'element' ) && wrapper.getStyle( 'mso-element' ) === 'para-border-div';
}

/**
 * Checks if the element or any of its children have a list-like style.
 */
function hasAnyListLikeElement( element: ViewElement, writer: ViewUpcastWriter ) {
	for ( const child of writer.createRangeIn( element ).getItems() ) {
		if ( child.is( 'element' ) && child.getStyle( 'mso-list' ) ) {
			return true;
		}
	}

	return false;
}
